{"version":3,"file":"fn-validate.es.js","sources":["../src/utils/is-number.js","../src/between.js","../src/utils/is-func.js","../src/combine.js","../src/utils/is-promise.js","../src/combine-async.js","../src/email.js","../src/equal-to.js","../src/greater-than.js","../src/greater-than-or-equal-to.js","../src/utils/is-string.js","../src/has-char.js","../src/has-lowercase.js","../src/has-numeric.js","../src/has-uppercase.js","../src/is-numeric.js","../src/length-between.js","../src/less-than.js","../src/less-than-or-equal-to.js","../src/matches.js","../src/max-length.js","../src/min-length.js","../src/not-default.js","../src/not-equal-to.js","../src/required.js"],"sourcesContent":["export function isNumber(num) {\r\n\treturn typeof num === 'number';\r\n}\r\n","import { isNumber } from './utils/is-number';\r\n\r\n/**\r\n * Checks a number is between two values (inclusively)\r\n *\r\n * @param {number} min\r\n * @param {number} max\r\n * @param {string=} message\r\n */\r\nexport const between = (min, max, message = 'Should be between ' + min + ' and ' + max) => {\r\n\treturn (val) => {\r\n\t\tlet parsed = isNumber(val) ? val : parseFloat(val);\r\n\r\n\t\treturn !Number.isNaN(parsed) && (val < min || val > max) ? [message] : [];\r\n\t};\r\n};\r\n","export function isFunction(func) {\r\n\tif (typeof func === 'function' && func.call) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n","import { isFunction } from './utils/is-func';\r\n\r\n/**\r\n * Combines a list of validators into... a new validator!\r\n *\r\n * Validators are run in sequence until the first error is found and is returned.\r\n * If runAll is `true` then all validators are run and all errors found (if any) are returned in an array.\r\n *\r\n * @param {Array<() => string[]>} validators List of validators to combine\r\n * @param {boolean} runAll If true will run all validators regardless and return all error messages, false by default.\r\n * @returns {string[]} Contains any validation errors found\r\n */\r\nexport function combine(validators, runAll) {\r\n\tif (!Array.isArray(validators)) {\r\n\t\tthrow new Error('combine requires that validators are an array of functions');\r\n\t}\r\n\r\n\t// handle an empty array of validators not causing errors\r\n\tif (validators.length === 0) {\r\n\t\treturn () => [];\r\n\t}\r\n\r\n\t// check that validators passed in are functions\r\n\tfor (let i = 0, end = validators.length; i < end; i++) {\r\n\t\tif (!isFunction(validators[i])) {\r\n\t\t\tthrow new Error('Each validator needs to be a function');\r\n\t\t}\r\n\t}\r\n\r\n\t// No point in wrapping this function if only one\r\n\tif (validators.length === 1) {\r\n\t\treturn validators;\r\n\t}\r\n\r\n\tif (runAll === true) {\r\n\t\treturn (val) => validators.reduce((errors, validator) => errors.concat(validator(val)), []);\r\n\t}\r\n\r\n\treturn (val) => {\r\n\t\tfor (const validator of validators) {\r\n\t\t\tlet result = validator(val);\r\n\r\n\t\t\tif (result.length > 0) {\r\n\t\t\t\t// If an error escape loop early\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t};\r\n}\r\n","export const isPromise = (val) => {\r\n\treturn val instanceof Promise;\r\n};\r\n","import { isPromise } from './utils/is-promise';\r\nimport { isFunction } from './utils/is-func';\r\n\r\n/**\r\n * Combines a list of validators into... a new validator!... Asynchronously\r\n *\r\n * Validators are run in sequence until the first error is found and is returned.\r\n * If runAll is `true` then all validators are run and all errors found (if any) are returned in an array.\r\n *\r\n * `combineAsync` works in the same way to `combine`, it differs in that returns a Promise that resolves to validation errors not an array directly.\r\n * `combineAsync` also accepts validators that return Promises that return arrays of string, not just arrays of strings, meaning it can accept\r\n *\r\n * @param {Array<() => string[] | PromiseLike<string[]>>} validators List of validators to combine\r\n * @param {boolean} runAll If true will run all validators regardless and return all error messages, false by default.\r\n * @returns {PromiseLike<string[]>} Contains any validation errors found\r\n */\r\nexport function combineAsync(validators, runAll = false) {\r\n\tif (!Array.isArray(validators)) {\r\n\t\tthrow new Error('combineAsync requires that validators are an array of functions');\r\n\t}\r\n\r\n\t// handle an empty array of validators not causing errors\r\n\tif (validators.length === 0) {\r\n\t\treturn () => Promise.resolve([]);\r\n\t}\r\n\r\n\t// check that validators passed in are functions\r\n\tfor (let i = 0, end = validators.length; i < end; i++) {\r\n\t\tif (!isFunction(validators[i])) {\r\n\t\t\tthrow new Error('Each validator needs to be a function');\r\n\t\t}\r\n\t}\r\n\r\n\t// No point in wrapping this function if only one\r\n\tif (validators.length === 1) {\r\n\t\tconst validator = validators[0];\r\n\r\n\t\treturn (val) => {\r\n\t\t\tvar result = validator(val);\r\n\t\t\treturn isPromise(result) ? result : Promise.resolve(result);\r\n\t\t};\r\n\t}\r\n\r\n\tif (runAll) {\r\n\t\treturn (val) => runAllValidators(validators, val);\r\n\t}\r\n\r\n\treturn (val) => firstErrorValidator(validators, val);\r\n}\r\n\r\nfunction runAllValidators(validators, val) {\r\n\tconst promises = validators.map((validator) => {\r\n\t\tconst result = validator(val);\r\n\r\n\t\treturn isPromise(result) ? result : Promise.resolve(result);\r\n\t});\r\n\r\n\treturn Promise.all(promises).then((results) => {\r\n\t\treturn results.reduce((output, result) => output.concat(result), []);\r\n\t});\r\n}\r\n\r\nfunction firstErrorValidator(validators, val) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tlet errorFound = false; // Use this in case a promise resolves after an error has already been resolved\r\n\t\tlet resultsRemaing = validators.length;\r\n\r\n\t\tfor (let i = 0, n = validators.length; i < n; i++) {\r\n\t\t\tif (errorFound) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = validators[i](val);\r\n\t\t\t\tconst isPromiseResult = isPromise(result);\r\n\r\n\t\t\t\tif (!isPromiseResult && result.length > 0) {\r\n\t\t\t\t\terrorFound = true;\r\n\t\t\t\t\tresolve(result);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (!isPromiseResult) {\r\n\t\t\t\t\tif (--resultsRemaing === 0) {\r\n\t\t\t\t\t\tresolve([]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult\r\n\t\t\t\t\t\t.then((result) => {\r\n\t\t\t\t\t\t\tif (result.length > 0) {\r\n\t\t\t\t\t\t\t\terrorFound = true;\r\n\t\t\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t\t\t} else if (--resultsRemaing === 0) {\r\n\t\t\t\t\t\t\t\tresolve([]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(reject);\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n","const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n/**\r\n * Checks a string against a regex to see if the value matches an email address format or not\r\n *\r\n * @param {string=} message\r\n */\r\nexport const email = (message = 'Email address is not valid') => {\r\n\r\n    return (val) => {\r\n\r\n        return emailRegex.test(val) ? [] : [message];\r\n    }\r\n};","import { isFunction } from './utils/is-func';\r\n\r\n/**\r\n * Compares to a value to a another value or the value returned from a function\r\n *\r\n * @param {(func|*)} otherValue - If a function the return value from the function is compared, otherwise just does an exact match on the value\r\n * @param {string=} message - The validation message to return to the user\r\n */\r\nexport const equalTo = (otherValue, message = 'Values are not equal') => {\r\n\r\n    var check = isFunction(otherValue) ? otherValue : () => otherValue;\r\n\r\n    return (val) => {\r\n        return check() === val ? [] : [message];\r\n    };\r\n};","/**\r\n * Checks value is greater than a supplied value\r\n *\r\n * @param {number} minValue\r\n * @param {string=} message\r\n */\r\nexport const greaterThan = (minValue, message = 'Value is too small') => {\r\n\treturn (val) => {\r\n\t\treturn val > minValue ? [] : [message];\r\n\t};\r\n};\r\n","/**\r\n * Checks value is greater than or equal to a supplied value.\r\n *\r\n * @param {number} minValue\r\n * @param {string=} message\r\n */\r\nexport const greaterThanOrEqualTo = (minValue, message = 'Value is too small') => {\r\n\treturn (val) => {\r\n\t\treturn val >= minValue ? [] : [message];\r\n\t};\r\n};\r\n","export const isString = (val) => {\r\n\treturn typeof val === 'string' || val instanceof String;\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a value has at least one of the characters supplied\r\n *\r\n * @param {string} characters A string containing a list of characters check at least one is in the value to check.\r\n * @param {string=} message\r\n */\r\nexport const hasChar = (characters = '', message = 'Missing required character') => {\r\n\r\n    // TODO: [LC] Consider testing this against a regex version for speed\r\n    if (isString(characters)) {\r\n        characters = characters.split('');\r\n    }\r\n\r\n    return (val) => {\r\n\r\n        if (!isString(val)) {\r\n            return [];\r\n        }\r\n\r\n        for (let i = 0, n = characters.length; i < n; i++) {\r\n\r\n            if (val.indexOf(characters[i]) > -1) {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        return [message];\r\n    };\r\n};","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a value has at least one lowercase character\r\n *\r\n * NB: Currently English alphabet characters only\r\n *\r\n * @param {string=} message\r\n */\r\nexport const hasLowercase = (message = 'Requires a lowercase character') => {\r\n\tvar reg = /[a-z]/;\r\n\r\n\treturn (val) => {\r\n\t\treturn isString(val) && reg.test(val) ? [] : [message];\r\n\t};\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a value has at least one numeric character\r\n *\r\n * @param {string=} message\r\n */\r\nexport const hasNumeric = (message = 'Requires a number') => {\r\n\tvar reg = /\\d/;\r\n\r\n\treturn (val) => {\r\n\t\treturn isString(val) && reg.test(val) ? [] : [message];\r\n\t};\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a value has at least one uppercase character\r\n *\r\n * NB: Currently English alphabet characters only\r\n *\r\n * @param {string=} message\r\n */\r\nexport const hasUppercase = (message = 'Requires an uppercase character') => {\r\n\tvar reg = /[A-Z]/;\r\n\r\n\treturn (val) => {\r\n\t\treturn isString(val) && reg.test(val) ? [] : [message];\r\n\t};\r\n};\r\n","import { isNumber } from './utils/is-number';\r\n\r\n/**\r\n * Checks if a value is a number or whether it can be converted to a number (via parseFloat)\r\n *\r\n * @param {string=} message\r\n */\r\nexport const isNumeric = (message = 'Value is not a valid number') => {\r\n\treturn (val) => {\r\n\t\tif (isNumber(val)) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\treturn isNaN(parseFloat(val)) ? [message] : [];\r\n\t};\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a string is between a minimum and maximum length (inclusive)\r\n *\r\n * @param {number} minLength\r\n * @param {number} maxLength\r\n * @param {string=} message\r\n */\r\nexport const lengthBetween = (\r\n\tminLength,\r\n\tmaxLength,\r\n\tmessage = 'Should be between ' + minLength + ' and ' + maxLength + ' in length'\r\n) => {\r\n\treturn (val) => {\r\n\t\treturn isString(val) && (val.length < minLength || val.length > maxLength) ? [message] : [];\r\n\t};\r\n};\r\n","/**\r\n * Checks value is less than a supplied value.\r\n *\r\n * @param {number} maxValue\r\n * @param {string=} message\r\n */\r\nexport const lessThan = (maxValue, message = 'Value is too large') => {\r\n\treturn (val) => {\r\n\t\treturn val < maxValue ? [] : [message];\r\n\t};\r\n};\r\n","/**\r\n * Checks value is less than or equal to a supplied value.\r\n *\r\n * @param {number} maxValue\r\n * @param {string=} message\r\n */\r\nexport const lessThanOrEqualTo = (maxValue, message = 'Value is too large') => {\r\n\treturn (val) => {\r\n\t\treturn val <= maxValue ? [] : [message];\r\n\t};\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a value matches a regexp pattern\r\n *\r\n * @param {string|RegExp} regex Pattern to match value against\r\n * @param {*} message\r\n */\r\nexport const matches = (regex, message = 'Value doesnt match pattern') => {\r\n\tregex = isString(regex) ? new RegExp(regex) : regex;\r\n\r\n\treturn (val) => {\r\n\t\treturn regex.test(val) ? [] : [message];\r\n\t};\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a string is not longer longer than the number stated\r\n *\r\n * @param {number} maxLength\r\n * @param {string=} message\r\n */\r\nexport const maxLength = (maxLength, message = 'Too long') => {\r\n\treturn (val) => {\r\n\t\treturn isString(val) && val.length > maxLength ? [message] : [];\r\n\t};\r\n};\r\n","import { isString } from './utils/is-string';\r\n\r\n/**\r\n * Checks a string is than the number stated\r\n *\r\n * @param {number} minLength\r\n * @param {string=} message\r\n */\r\nexport const minLength = (minLength, message = 'Not long enough') => {\r\n\treturn (val) => {\r\n\t\treturn isString(val) && val.length < minLength ? [message] : [];\r\n\t};\r\n};\r\n","/**\r\n * Similar to required, checks a value against a default or list of default values to ensure its been changed.\r\n * Uses exact match (===) for comparison.\r\n *\r\n * @param {*|*[]} defaultValues A single value or list of values that are considered 'default' e.g. [0,'', 'false']\r\n * @param {string=} message\r\n */\r\nexport const notDefault = (defaultValues, message = 'This is required') => {\r\n\tdefaultValues = Array.isArray(defaultValues) ? defaultValues : [defaultValues];\r\n\r\n\treturn (val) => {\r\n\t\tfor (let i = 0, n = defaultValues.length; i < n; i++) {\r\n\t\t\tif (val === defaultValues[i]) {\r\n\t\t\t\treturn [message];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// No match so return no error\r\n\t\treturn [];\r\n\t};\r\n};\r\n","import { isFunction } from './utils/is-func';\r\n\r\n/**\r\n * Compares to a value to a another value returned from a function\r\n *\r\n * @param {(func|*)} otherValue - If a function the return value from the function is compared, otherwise just does an exact match on the value\r\n * @param {string=} message - The validation message to return to the user\r\n */\r\nexport const notEqualTo = (otherValue, message = 'Values should not be the same') => {\r\n\r\n    var check = isFunction(otherValue) ? otherValue : () => otherValue;\r\n\r\n    return (val) => {\r\n        return check() !== val ? [] : [message];\r\n    };\r\n};","/**\r\n * Checks a value is not 'falsy', considered invalid if it is.\r\n *\r\n * @param {string=} message\r\n */\r\nexport const required = (message = 'Required') => {\r\n\treturn (val) => {\r\n\t\treturn val ? [] : [message];\r\n\t};\r\n};\r\n"],"names":[],"mappings":"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"}